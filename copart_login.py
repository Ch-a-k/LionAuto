# copart_service.py
import asyncio
import json
import re
from datetime import datetime, date, timezone
from typing import Optional, Any, Dict, List
from urllib.parse import urlparse, parse_qs, unquote

import aiosqlite
from playwright.async_api import async_playwright, TimeoutError as PlaywrightTimeoutError


ENG_WEEKDAYS = {
    0: "Monday",
    1: "Tuesday",
    2: "Wednesday",
    3: "Thursday",
    4: "Friday",
    5: "Saturday",
    6: "Sunday",
}


# =========================
# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π (SQLite)
# =========================
class SessionStore:
    """
    –ü—Ä–æ—Å—Ç–µ–π—à–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ storage_state –≤ SQLite.
    –ö–ª—é—á–æ–º –∏—Å–ø–æ–ª—å–∑—É–µ–º username (–∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –≤–∞—à –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞).
    """
    def __init__(self, db_path: str = "sessions.db"):
        self.db_path = db_path

    async def init(self):
        async with aiosqlite.connect(self.db_path) as db:
            await db.execute("""
            CREATE TABLE IF NOT EXISTS bot_sessions (
                username TEXT PRIMARY KEY,
                storage_state_json TEXT NOT NULL,
                updated_at TEXT NOT NULL
            )
            """)
            await db.commit()

    async def get_storage_state(self, username: str) -> Optional[Dict[str, Any]]:
        async with aiosqlite.connect(self.db_path) as db:
            async with db.execute("SELECT storage_state_json FROM bot_sessions WHERE username = ?", (username,)) as cur:
                row = await cur.fetchone()
                if not row:
                    return None
                try:
                    return json.loads(row[0])
                except Exception:
                    return None

    async def save_storage_state(self, username: str, storage_state: Dict[str, Any]):
        payload = json.dumps(storage_state, ensure_ascii=False)
        now = datetime.utcnow().isoformat()
        async with aiosqlite.connect(self.db_path) as db:
            await db.execute("""
            INSERT INTO bot_sessions(username, storage_state_json, updated_at)
            VALUES (?, ?, ?)
            ON CONFLICT(username) DO UPDATE SET
              storage_state_json=excluded.storage_state_json,
              updated_at=excluded.updated_at
            """, (username, payload, now))
            await db.commit()


# ==============
# Copart Bot
# ==============
class CopartBot:
    def __init__(self, username: str, password: str, headless: bool = True):
        self.username = username
        self.password = password
        self.headless = headless

        self._pw = None
        self.browser = None
        self.context = None
        self.page = None

    # ---------- lifecycle ----------
    async def start(self, storage_state: Optional[Dict[str, Any]] = None):
        self._pw = await async_playwright().start()
        self.browser = await self._pw.chromium.launch(headless=self.headless)
        self.context = await self.browser.new_context(storage_state=storage_state)
        self.page = await self.context.new_page()
        return self

    async def close(self):
        try:
            if self.context:
                await self.context.close()
            if self.browser:
                await self.browser.close()
        finally:
            if self._pw:
                await self._pw.stop()

    async def storage_state(self) -> Dict[str, Any]:
        return await self.context.storage_state()

    # ---------- small utils ----------
    async def _maybe_accept_cookies(self):
        try:
            await self.page.locator("text=Accept").first.click(timeout=2000)
        except Exception:
            pass

    async def _scroll_to_bottom(self, step: int = 1500, max_iters: int = 20):
        prev_height = await self.page.evaluate("document.body.scrollHeight")
        iters = 0
        while iters < max_iters:
            iters += 1
            await self.page.mouse.wheel(0, step)
            await self.page.wait_for_timeout(250)
            cur_height = await self.page.evaluate("document.body.scrollHeight")
            if cur_height <= prev_height:
                await self.page.evaluate("window.scrollTo(0, document.body.scrollHeight)")
                await self.page.wait_for_timeout(300)
                cur_height = await self.page.evaluate("document.body.scrollHeight")
                if cur_height <= prev_height:
                    break
            prev_height = cur_height

    # ---------- auth / health ----------
    async def login_member(self) -> bool:
        await self.page.goto("https://www.copart.com", wait_until="domcontentloaded")
        await self._maybe_accept_cookies()

        await self.page.click("button[data-uname='homePageSignIn']")
        await self.page.wait_for_selector("a[data-uname='homePageMemberSignIn']", timeout=8000)
        await self.page.click("a[data-uname='homePageMemberSignIn']")

        await self.page.wait_for_selector("input#username")
        await self.page.fill("input#username", self.username)
        await self.page.fill("input#password", self.password)

        await self.page.click("button[data-uname='loginSigninmemberbutton']")

        try:
            await self.page.wait_for_url("**/dashboard*", timeout=25000)
            await self.page.wait_for_selector("text=Hi,", timeout=20000)
            greet = await self.page.locator("text=Hi,").first.text_content()
            print(f"‚úÖ –í–æ—à—ë–ª: {(greet or '').strip()}")
            return True
        except PlaywrightTimeoutError as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ö–æ–¥: {e}")
            return False

    async def health_check(self) -> bool:
        """
        –ë—ã—Å—Ç—Ä—ã–π –ø–∏–Ω–≥: –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å dashboard –∏ —É–≤–∏–¥–µ—Ç—å "Hi,".
        """
        try:
            await self.page.goto("https://www.copart.com/dashboard", wait_until="domcontentloaded")
            await self._maybe_accept_cookies()
            await self.page.wait_for_selector("text=Hi,", timeout=8000)
            return True
        except Exception:
            return False

    async def ensure_session(self, store: SessionStore) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ª–æ–≥–∏–Ω–µ–Ω –ª–∏ –±–æ—Ç; –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –¥–µ–ª–∞–µ—Ç –ª–æ–≥–∏–Ω –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç storage_state –≤ –ë–î.
        """
        ok = await self.health_check()
        if ok:
            return True

        print("üîê –°–µ—Å—Å–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω–∞ ‚Äî –ª–æ–≥–∏–Ω—é—Å—å –∑–∞–Ω–æ–≤–æ‚Ä¶")
        ok = await self.login_member()
        if not ok:
            return False

        state = await self.storage_state()
        await store.save_storage_state(self.username, state)
        return True

    # ---------- parsing helpers ----------
    async def _wait_table_ready(self, hard_timeout: int = 20000):
        await self.page.wait_for_load_state("networkidle")
        await self.page.wait_for_selector("table#serverSideDataTable", timeout=hard_timeout)
        try:
            await self.page.wait_for_selector("table#serverSideDataTable tbody tr a.search-results", timeout=2500)
        except Exception:
            await self._scroll_to_bottom()
            await self.page.wait_for_selector("table#serverSideDataTable tbody tr a.search-results", timeout=hard_timeout)

    def _lot_id_from_url(self, url: str) -> Optional[str]:
        m = re.search(r"/lot/(\d+)", urlparse(url).path)
        return m.group(1) if m else None

    def _sale_keys(self, url: str):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (yardNum, yyyy-mm-dd) –∏–∑ saleListResult URL.
        """
        p = urlparse(url)
        parts = [x for x in p.path.split("/") if x]
        yard = parts[1] if len(parts) > 1 and parts[0] == "saleListResult" else None
        date_path = parts[2] if len(parts) > 2 and parts[0] == "saleListResult" else None
        qs = parse_qs(p.query or "")
        yard_qs = (qs.get("yardNum") or [None])[0]
        return (yard or yard_qs, date_path)

    async def _ensure_on_sale_list(self, expected_url: str, *, attempts: int = 3) -> bool:
        exp_yard, exp_date = self._sale_keys(expected_url)
        for i in range(1, attempts + 1):
            cur = self.page.url
            cur_yard, cur_date = self._sale_keys(cur)
            ok = ("/saleListResult/" in urlparse(cur).path) and (cur_yard == exp_yard) and (cur_date == exp_date)
            if ok:
                return True

            print(f"‚ö†Ô∏è –ù–µ –Ω–∞ –Ω—É–∂–Ω–æ–π saleList (got: {cur_yard}/{cur_date}, need: {exp_yard}/{exp_date}) ‚Äî –ø–æ–ø—ã—Ç–∫–∞ {i}/{attempts}")
            await self.page.goto(expected_url, wait_until="domcontentloaded")
            try:
                await self._wait_table_ready(hard_timeout=20000)
                await self._scroll_to_bottom()
            except Exception:
                pass
        return False

    async def _ensure_on_lot(self, expected_url: str, *, attempts: int = 3) -> bool:
        exp_lot = self._lot_id_from_url(expected_url)
        for i in range(1, attempts + 1):
            cur = self.page.url
            cur_lot = self._lot_id_from_url(cur)

            dom_lot = ""
            try:
                await self.page.wait_for_selector("h1.title, #LotNumber, .lot-detail-section", timeout=6000)
                try:
                    dom_lot = (await self.page.locator("#LotNumber").first.inner_text()).strip()
                except Exception:
                    dom_lot = ""
            except Exception:
                pass

            if cur_lot == exp_lot or (dom_lot and exp_lot and exp_lot in dom_lot):
                return True

            print(f"‚ö†Ô∏è –ù–µ —Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ—Ç–∞ (got URL lot={cur_lot}, DOM lot={dom_lot or '‚Äî'}, need={exp_lot}) ‚Äî –ø–æ–ø—ã—Ç–∫–∞ {i}/{attempts}")
            await self.page.goto(expected_url, wait_until="domcontentloaded")
            await self.page.wait_for_selector("h1.title, #LotNumber, .lot-detail-section", timeout=15000)
            await self._scroll_to_bottom(step=1200, max_iters=2)
        return False

    # ---------- –∑–∞–¥–∞—á–∏ ----------
    async def get_auction_links(self) -> List[Dict[str, str]]:
        """
        –° /auctionCalendar ‚Äî {date, time, title, href}
        """
        await self.page.goto("https://www.copart.com/auctionCalendar", wait_until="load")
        await self.page.wait_for_selector("a[data-url]", timeout=20000)

        items = await self.page.evaluate(r"""
        () => {
          const toAbs = (u) => new URL(u, window.location.origin).href;

          const sampleLink = document.querySelector("a[data-url]");
          if (!sampleLink) return [];
          const table = sampleLink.closest("table") || document.querySelector("table");
          if (!table) return [];

          const colDates = [];
          const headRow = table.querySelector("thead tr");
          if (headRow) {
            const headCells = Array.from(headRow.children);
            headCells.forEach((cell, idx) => {
              let txt = (cell.textContent || "").trim().replace(/\s*\n\s*/g, " ");
              const m = txt.match(/\b\d{2}\/\d{2}\/\d{4}\b/);
              if (m) txt = m[0];
              colDates[idx] = txt;
            });
          }

          const anchors = Array.from(table.querySelectorAll("a[data-url]"));
          const results = [];
          for (const a of anchors) {
            const cell = a.closest("td,th");
            if (!cell) continue;
            const row = cell.parentElement;
            if (!row) continue;

            const rowCells = Array.from(row.children);
            const colIndex = rowCells.indexOf(cell);

            let timeText = "";
            const firstCell = rowCells[0];
            if (firstCell) {
              const raw = (firstCell.textContent || "").trim();
              const m = raw.match(/\b\d{1,2}:\d{2}\s?(AM|PM)\b/i);
              timeText = m ? m[0] : raw;
            }

            const dateText = (colDates[colIndex] || "").trim();
            const title = (a.textContent || "").trim();
            const hrefAttr = a.getAttribute("href") || a.getAttribute("data-url") || "";
            const href = toAbs(hrefAttr);

            if (href && title) results.push({ date: dateText, time: timeText, title, href });
          }
          return results;
        }
        """)
        return items

    @staticmethod
    def _extract_date_from_href(href: str) -> Optional[str]:
        """
        –î–æ—Å—Ç–∞—ë–º –¥–∞—Ç—É –∏–∑ href: /YYYY-MM-DD –∏–ª–∏ saleDate=epoch_ms ‚Üí MM/DD/YYYY
        """
        if not href:
            return None

        m = re.search(r"/(\d{4}-\d{2}-\d{2})(?:[/?#]|$)", href)
        if m:
            iso = m.group(1)
            try:
                dt = datetime.strptime(iso, "%Y-%m-%d")
                return dt.strftime("%m/%d/%Y")
            except ValueError:
                pass

        try:
            qs = parse_qs(urlparse(href).query)
            if "saleDate" in qs and qs["saleDate"]:
                ms = int(qs["saleDate"][0])
                dt = datetime.fromtimestamp(ms / 1000, tz=timezone.utc)
                return dt.strftime("%m/%d/%Y")
        except Exception:
            pass

        return None

    async def get_regions_for_date(self, target: Optional[date] = None) -> List[Dict[str, str]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–≥–∏–æ–Ω—ã (—Ç–∞–π–º—Å–ª–æ—Ç, –Ω–∞–∑–≤–∞–Ω–∏–µ, —Å—Å—ã–ª–∫–∞) –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî —Å–µ–≥–æ–¥–Ω—è).
        """
        target = target or date.today()
        target_str = target.strftime("%m/%d/%Y")

        items = await self.get_auction_links()
        regions = []
        for it in items:
            raw_date = (it.get("date") or "").strip() or self._extract_date_from_href(it.get("href") or "")
            if raw_date == target_str:
                regions.append({
                    "time": (it.get("time") or "").strip(),
                    "title": (it.get("title") or "").strip(),
                    "link": (it.get("href") or "").strip(),
                })
        return regions

    async def get_lot_details(self, lot_url: str) -> Dict[str, Any]:
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ—Ç–∞ –∏ –≤—ã—Ç—è–≥–∏–≤–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è + —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–∏–Ω–∏–∞—Ç—é—Ä—ã.
        """
        await self.page.goto(lot_url, wait_until="domcontentloaded")
        ok = await self._ensure_on_lot(lot_url, attempts=3)
        if not ok:
            raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –ª–æ—Ç–∞")

        await self.page.wait_for_selector("h1.title, #LotNumber, .lot-detail-section", timeout=20000)
        await self.page.wait_for_timeout(120)
        await self._scroll_to_bottom(step=1200, max_iters=2)

        try:
            await self.page.wait_for_selector(".p-galleria-thumbnail-items img, .p-galleria-img-thumbnail", timeout=3000)
        except Exception:
            pass

        details = await self.page.evaluate(r"""
        () => {
          const txt = (sel) => {
            const el = document.querySelector(sel);
            return el ? (el.textContent || "").replace(/\s+/g, " ").trim() : "";
          };
          const byLabel = (needle) => {
            const labs = Array.from(document.querySelectorAll("label"));
            for (const l of labs) {
              const t = (l.textContent || "").replace(/\s+/g, " ").trim().toLowerCase();
              if (!t) continue;
              if (t.startsWith(needle.toLowerCase())) {
                const parent = l.closest(".d-flex") || l.parentElement;
                const v = parent ? parent.querySelector(".lot-details-desc") : null;
                if (v) return (v.textContent || "").replace(/\s+/g, " ").trim();
              }
            }
            return "";
          };
          const uniq = (arr) => Array.from(new Set(arr.filter(Boolean)));

          // VIN
          const vinEl = document.querySelector("div[masking][number]");
          const vinAttr = vinEl ? vinEl.getAttribute("number") : "";
          const vin = vinAttr || txt("span[data-uname='lotdetailVinvalue']");

          // –Ω–æ–º–µ—Ä–∞
          const lotFromPage = txt("#LotNumber");
          const lotFromUrl = (location.pathname.match(/\/lot\/(\d+)/) || [])[1] || "";

          // –∫–∞—Ä—Ç–∏–Ω–∫–∏ (–º–∏–Ω–∏–∞—Ç—é—Ä—ã –≥–∞–ª–µ—Ä–µ–∏)
          const thumbImgs = Array.from(document.querySelectorAll(".p-galleria-thumbnail-items img, .p-galleria-img-thumbnail"))
            .map(img => (img.getAttribute("src") || "").trim());

          return {
            title: txt("h1.title"),
            lot_number: lotFromPage || lotFromUrl,
            vin,
            title_code: txt("span[data-uname='lotdetailTitledescriptionvalue']"),
            odometer: txt("span[data-uname='lotdetailOdometervalue']"),
            primary_damage: txt("span[data-uname='lotdetailPrimarydamagevalue']"),
            cylinders: txt("span[data-uname='lotdetailCylindervalue']"),
            color: txt("span[data-uname='lotdetailColorvalue']"),
            engine_type: txt("span[data-uname='lotdetailEnginetype']"),
            transmission: byLabel("transmission"),
            drive: txt("span[data-uname='DriverValue']"),
            vehicle_type: txt("span[data-uname='lotdetailvehicletype']"),
            fuel: txt("span[data-uname='lotdetailFuelvalue']"),
            keys: txt("span[data-uname='lotdetailKeyvalue']"),
            images: uniq(thumbImgs),
          };
        }
        """)
        details["lot_link"] = lot_url
        return details

        # ---------- auctionsCalendar: live / inactive ----------
    async def get_calendar_live_status(self) -> Dict[str, List[Dict[str, str]]]:
        """
        –ù–∞ /auctionCalendar —Å–æ–±–∏—Ä–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –∏ —Å—Ç–∞—Ç—É—Å:
        live=True ‚Äî –µ—Å–ª–∏ —Ä—è–¥–æ–º —Å –ø—É–Ω–∫—Ç–æ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—è –µ—Å—Ç—å <i class="fa ... fa-li-live">,
        –∏–Ω–∞—á–µ ‚Äî inactive. –ì–æ—Ä–∞–∑–¥–æ –±–æ–ª–µ–µ —É—Å—Ç–æ–π—á–∏–≤–æ –∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ DOM.
        """
        await self.page.goto("https://www.copart.com/auctionCalendar", wait_until="domcontentloaded")
        await self._maybe_accept_cookies()
        # –¥–∞—ë–º SPA –¥–æ—Ä–∏—Å–æ–≤–∞—Ç—å—Å—è –∏ –ø–æ–¥–≥—Ä—É–∑–∏—Ç—å—Å—è
        await self.page.wait_for_selector("a[data-url]", timeout=20000)
        await self._scroll_to_bottom(step=1200, max_iters=6)
        await self.page.wait_for_timeout(400)

        data = await self.page.evaluate(r"""
        () => {
        const toAbs = (u) => new URL(u, window.location.origin).href;
        const results = { active: [], inactive: [] };

        // 1) –ü–æ–º–µ—á–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –∏–∫–æ–Ω–∫–∏
        const markContainer = (node, kind) => {
            if (!node) return;
            if (!node.__copartStatus__) node.__copartStatus__ = { live:false, gray:false };
            if (kind === "live") node.__copartStatus__.live = true;
            if (kind === "gray") node.__copartStatus__.gray = true;
        };

        const icons = Array.from(document.querySelectorAll("i.fa-circle"));
        for (const i of icons) {
            const isLive = i.classList.contains("fa-li-live");
            const isGray = i.classList.contains("fa-li-gray");
            const cont = i.closest("tr, li, div, td, section") || i.parentElement;
            if (isLive) markContainer(cont, "live");
            else if (isGray) markContainer(cont, "gray");
        }

        // 2) –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –∫–∞—Ä—Ç—É –¥–∞—Ç –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö —Ç–∞–±–ª–∏—Ü—ã (–µ—Å–ª–∏ –æ–Ω–∞ –≤–æ–æ–±—â–µ —Ç–∞–±–ª–∏—Ü–∞)
        const table = document.querySelector("a[data-url]")?.closest("table") || document.querySelector("table");
        const headDates = [];
        if (table) {
            const headRow = table.querySelector("thead tr");
            if (headRow) {
            Array.from(headRow.children).forEach((cell, idx) => {
                let txt = (cell.textContent || "").trim().replace(/\s*\n\s*/g, " ");
                const m = txt.match(/\b\d{2}\/\d{2}\/\d{4}\b/);
                if (m) txt = m[0];
                headDates[idx] = txt;
            });
            }
        }

        // 3) –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏
        const anchors = Array.from(document.querySelectorAll("a[data-url]"));
        for (const a of anchors) {
            const cell = a.closest("td,th");
            const row  = cell?.parentElement || a.closest("tr, li, div, section");

            // –í—Ä–µ–º—è/–¥–∞—Ç–∞ –µ—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—á–Ω–∞—è
            let timeText = "";
            let dateText = "";
            if (row && cell && row.children && row.children.length) {
            const rowCells = Array.from(row.children);
            const colIndex = rowCells.indexOf(cell);
            const firstCell = rowCells[0];
            if (firstCell) {
                const raw = (firstCell.textContent || "").trim();
                const m = raw.match(/\b\d{1,2}:\d{2}\s?(AM|PM)\b/i);
                timeText = m ? m[0] : raw;
            }
            dateText = (headDates[colIndex] || "").trim();
            } else {
            // —Ñ–æ–ª–ª–±–µ–∫ ‚Äî –ø–∞—Ä—Å–∏–º –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å—Ç—Ä–æ–∫–∏
            const raw = (row?.textContent || "").trim();
            const m = raw.match(/\b\d{1,2}:\d{2}\s?(AM|PM)\b/i);
            timeText = m ? m[0] : "";
            const d = raw.match(/\b\d{2}\/\d{2}\/\d{4}\b/);
            dateText = d ? d[0] : "";
            }

            const title = (a.textContent || "").trim();
            const hrefAttr = a.getAttribute("href") || a.getAttribute("data-url") || "";
            const href = toAbs(hrefAttr);

            // 4) –û–ø—Ä–µ–¥–µ–ª—è–µ–º live-—Å—Ç–∞—Ç—É—Å
            let is_live = false;
            if (row && row.__copartStatus__ && row.__copartStatus__.live) is_live = true;
            // –µ—Å–ª–∏ —è–≤–Ω–æ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ gray ‚Äî –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ–º
            if (row && row.__copartStatus__ && row.__copartStatus__.gray) is_live = false;

            // –î–æ–ø. –ø–æ–∏—Å–∫ –∏–∫–æ–Ω–∫–∏ —Ä—è–¥–æ–º (–Ω–∞ —Å–ª—É—á–∞–π —Å—Ç—Ä–∞–Ω–Ω–æ–π —Ä–∞–∑–º–µ—Ç–∫–∏)
            if (!is_live) {
            const scope = row || a.closest("li, tr, td, div") || a.parentElement || document;
            if (scope.querySelector("i.fa-li-live, i.fa-circle.fa-li-live")) {
                is_live = true;
            }
            }

            const item = { date: dateText, time: timeText, title, href, is_live };
            (is_live ? results.active : results.inactive).push(item);
        }

        return results;
        }
        """)
        return data

    async def _debug_calendar_counters(self):
        try:
            counts = await self.page.evaluate(r"""
            () => ({
            liveIcons: document.querySelectorAll('i.fa-circle.fa-li-live, i.fa-li-live').length,
            grayIcons: document.querySelectorAll('i.fa-circle.fa-li-gray, i.fa-li-gray').length,
            anchors:   document.querySelectorAll('a[data-url]').length
            })
            """)
            print("DBG calendar:", counts)
        except Exception as e:
            print("DBG calendar error:", e)


        # ------ helpers: –∫–ª–∏–∫ –±–µ–∑ –∞–≤—Ç–æ—Å–∫—Ä–æ–ª–ª–∞ ------
    async def _js_click_no_scroll(self, locator) -> bool:
        try:
            handle = await locator.element_handle()
            if not handle:
                return False
            await self.page.evaluate(
                """
                (el) => {
                  const sx = window.scrollX, sy = window.scrollY;
                  const orig = Element.prototype.scrollIntoView;
                  Element.prototype.scrollIntoView = function(){};
                  try {
                    el.dispatchEvent(new MouseEvent('click', { bubbles: true, cancelable: true, view: window }));
                  } finally {
                    setTimeout(() => {
                      window.scrollTo(sx, sy);
                      Element.prototype.scrollIntoView = orig;
                    }, 0);
                  }
                }
                """,
                handle,
            )
            return True
        except Exception:
            return False

    # ------ —Å–ø–∏—Å–æ–∫ –º–æ–¥–∞–ª—å–Ω—ã—Ö live-—Å—Å—ã–ª–æ–∫ –¥–ª—è –¥–µ–±–∞–≥–∞ ------
    async def debug_list_live_titles(self) -> List[str]:
        await self.page.wait_for_selector("a[ng-click*='openModal']", timeout=15000)
        titles = await self.page.evaluate(
            r"""
            () => {
              const rows = Array.from(document.querySelectorAll("a[ng-click*='openModal']"));
              return rows.map(a => (a.textContent || "").replace(/\s+/g, " ").trim()).filter(Boolean);
            }
            """
        )
        print("LIVE modal titles (sample):", titles.slice(0, 20))
        return titles

    # ------ join –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É –º–æ–¥–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ (–±–µ–∑ —Å–∫—Ä–æ–ª–ª–∞) ------
    async def join_live_from_calendar_by_title(self, title_like: str, *, wait_modal_timeout: int = 15000) -> bool:
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç https://www.copart.com/auctionCalendar, –Ω–∞—Ö–æ–¥–∏—Ç —Å—Å—ã–ª–∫—É –≤–∏–¥–∞
        <a ng-click="openModal(auction)"> ... (Live) </a> —Å —Ç–µ–∫—Å—Ç–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º title_like,
        –∫–ª–∏–∫–∞–µ—Ç –ë–ï–ó —Å–∫—Ä–æ–ª–ª–∞, –∂–¥—ë—Ç –º–æ–¥–∞–ª–∫—É –∏ –∂–º—ë—Ç Join. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –ø—Ä–∏ —É—Å–ø–µ—Ö–µ.
        """
        await self.page.goto("https://www.copart.com/auctionCalendar", wait_until="domcontentloaded")
        await self._maybe_accept_cookies()
        await self.page.wait_for_selector("a[ng-click*='openModal']", timeout=20000)

        # –ò—â–µ–º —Ç–æ—á–Ω—ã–º/—É–∫–æ—Ä–æ—á–µ–Ω–Ω—ã–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º
        link = self.page.locator("a[ng-click*='openModal']").filter(has_text=title_like)
        if not await link.count():
            base = title_like.split("(")[0].strip()
            if base:
                link = self.page.locator("a[ng-click*='openModal']").filter(has_text=base)

        if not await link.count():
            # –§–æ–ª–ª–±–µ–∫: –ø—Ä–æ—Å—Ç–æ –≤–æ–∑—å–º—ë–º –ü–ï–†–í–£–Æ live-–º–æ–¥–∞–ª–∫—É (—Ä—è–¥–æ–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å .fa-li-live)
            live_rows = self.page.locator("i.fa-li-live").locator("xpath=ancestor::*[self::tr or self::li or self::div][1]")
            if await live_rows.count():
                link = live_rows.first.locator("a[ng-click*='openModal']")
                if not await link.count():
                    print("‚ùå –ù–µ –Ω–∞—à—ë–ª <a ng-click*='openModal'> —Ä—è–¥–æ–º —Å .fa-li-live.")
                    return False
            else:
                print("‚ùå –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç –≤–∏–¥–∏–º—ã—Ö .fa-li-live.")
                # –ø–æ–ª–µ–∑–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –µ—Å—Ç—å
                await self.debug_list_live_titles()
                return False

        # –ö–ª–∏–∫ –ø–æ –º–æ–¥–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ ‚Äî –±–µ–∑ –∞–≤—Ç–æ—Å–∫—Ä–æ–ª–ª–∞
        ok = await self._js_click_no_scroll(link.first)
        if not ok:
            try:
                await link.first.click()  # –æ–±—ã—á–Ω—ã–π –∫–ª–∏–∫ –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤
            except Exception as e:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –º–æ–¥–∞–ª—å–Ω—É—é live-—Å—Å—ã–ª–∫—É: {e}")
                return False

        # –ñ–¥—ë–º —Å—Ç–∞—Ç—É—Å –º–æ–¥–∞–ª–∫–∏
        try:
            await self.page.wait_for_selector("p[data-uname='modalStatustxt']", timeout=wait_modal_timeout)
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–≤–∏–¥–µ–ª —Å—Ç–∞—Ç—É—Å –≤ –º–æ–¥–∞–ª–∫–µ (–º–æ–∂–µ—Ç, –≥—Ä—É–∑–∏—Ç—Å—è –¥–æ–ª—å—à–µ): {e}")

        # –ñ–º—ë–º Join ‚Äî —Ç–æ–∂–µ –±–µ–∑ –∞–≤—Ç–æ—Å–∫—Ä–æ–ª–ª–∞
        try:
            join_btn = self.page.locator("#liveJoinAuction[data-uname='joinLiveAuctionbtn']")
            await join_btn.wait_for(state="visible", timeout=12000)
            await self._js_click_no_scroll(join_btn)
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å Join live auction: {e}")
            return False

        # –î–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≥—Ä—É–∑–∫–∏ live-–¥–∞—à–±–æ—Ä–¥–∞
        return await self.wait_for_live_dashboard()


    async def click_live_slot_and_join(self, link: str, *, wait_modal_timeout: int = 15000) -> bool:
        """
        –ù–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ /auctionCalendar. –ö–ª–∏–∫–∞–µ—Ç –ø–æ live-—Å—Å—ã–ª–∫–µ –ë–ï–ó —Å–∫—Ä–æ–ª–ª–∞,
        –∂–¥—ë—Ç –º–æ–¥–∞–ª–∫—É "Live auction in progress", –∂–º—ë—Ç "Join live auction".
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å.
        """
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—Å—ã–ª–∫—É (–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ href/data-url)
        abs_link = await self.page.evaluate("(u) => new URL(u, window.location.origin).href", link)

        # –ò—â–µ–º —Ü–µ–ª–µ–≤–æ–π <a> —Ä–∞–∑–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ (href | data-url | endsWith)
        loc = self.page.locator(f"a[href='{abs_link}'], a[data-url='{abs_link}']")
        if not await loc.count():
            loc = self.page.locator(f"a[data-url$='{link}'], a[href$='{link}']")

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –æ–±–Ω–æ–≤–∏–º—Å—è/–ø–æ–¥–≥—Ä—É–∑–∏–º –≤—å—é
        if not await loc.count():
            await self.page.wait_for_selector("a[data-url]", timeout=8000)
            if not await loc.count():
                print("‚ùå –ù–µ –Ω–∞—à—ë–ª live-—Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è.")
                return False

        # JS-–∫–ª–∏–∫ –±–µ–∑ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ (—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å/–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å scroll, –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å scrollIntoView)
        try:
            handle = await loc.first.element_handle()
            await self.page.evaluate("""
            (el) => {
            const sx = window.scrollX, sy = window.scrollY;
            const orig = Element.prototype.scrollIntoView;
            Element.prototype.scrollIntoView = function(){}; // –±–ª–æ–∫–∏—Ä—É–µ–º –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫—É
            try {
                // –∫–ª–∏–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π MouseEvent
                el.dispatchEvent(new MouseEvent('click', { bubbles: true, cancelable: true, view: window }));
            } finally {
                // –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞
                setTimeout(() => {
                window.scrollTo(sx, sy);
                Element.prototype.scrollIntoView = orig;
                }, 0);
            }
            }
            """, handle)
        except Exception as e:
            print(f"‚ö†Ô∏è JS-–∫–ª–∏–∫ –Ω–µ —É–¥–∞–ª—Å—è, fallback: {e}")
            # –∫–∞–∫ –∫—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π ‚Äî –º—è–≥–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ (–Ω–æ —ç—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–æ–∫—Ä—É—Ç–∏—Ç—å)
            await self.page.goto(abs_link, wait_until="domcontentloaded")

        # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –º—ã –≤—Å—ë –µ—â—ë –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ (–ø–æ –¢–ó ‚Äî –Ω–µ —É—Ö–æ–¥–∏–º —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ Join)
        try:
            if "/auctionCalendar" not in self.page.url:
                # –µ—Å–ª–∏ –≤–¥—Ä—É–≥ SPA –¥–µ—Ä–Ω—É–ª–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—é ‚Äî –≤–µ—Ä–Ω—ë–º—Å—è
                await self.page.goto("https://www.copart.com/auctionCalendar", wait_until="domcontentloaded")
        except Exception:
            pass

        # –ñ–¥—ë–º –º–æ–¥–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        try:
            await self.page.wait_for_selector("p[data-uname='modalStatustxt']", timeout=wait_modal_timeout)
            # –∏–Ω–æ–≥–¥–∞ —Ç–µ–∫—Å—Ç –≤—Å–ø–ª—ã–≤–∞–µ—Ç —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π ‚Äî –¥–∞–¥–∏–º —Ç–∏–∫–∞–Ω—É—Ç—å
            await self.page.wait_for_timeout(200)
        except Exception as e:
            print(f"‚ö†Ô∏è –ú–æ–¥–∞–ª–∫–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º live –Ω–µ –ø–æ—è–≤–∏–ª–∞—Å—å: {e}")

        # –ñ–º—ë–º Join
        try:
            join_btn = self.page.locator("#liveJoinAuction[data-uname='joinLiveAuctionbtn']")
            await join_btn.wait_for(state="visible", timeout=10000)
            # –∂–º—ë–º —Ç–æ–∂–µ –±–µ–∑ –∞–≤—Ç–æ—Å–∫—Ä–æ–ª–ª–∞ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
            handle_join = await join_btn.element_handle()
            await self.page.evaluate("""
            (el) => {
            const sx = window.scrollX, sy = window.scrollY;
            const orig = Element.prototype.scrollIntoView;
            Element.prototype.scrollIntoView = function(){};
            try {
                el.dispatchEvent(new MouseEvent('click', { bubbles: true, cancelable: true, view: window }));
            } finally {
                setTimeout(() => {
                window.scrollTo(sx, sy);
                Element.prototype.scrollIntoView = orig;
                }, 0);
            }
            }
            """, handle_join)
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å Join live auction: {e}")
            return False

        # –î–æ–∂–¥—ë–º—Å—è –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∞–π–≤-–¥–∞—à–±–æ—Ä–¥–∞
        return await self.wait_for_live_dashboard()


    async def wait_for_live_dashboard(self, timeout_ms: int = 30000) -> bool:
        """
        –ü—Ä–∏–∑–Ω–∞–∫–∏ –ª–∞–π–≤-–¥–∞—à–±–æ—Ä–¥–∞:
        - —Å–µ–ª–µ–∫—Ç —Ñ–∏–ª—å—Ç—Ä–∞ (Show All / Watching / Outbid / ...)
        - –ø–∞–Ω–µ–ª—å –¥–µ—Ç–∞–ª–µ–π –ª–æ—Ç–∞ (section.lot-details-wrapper-MACRO)
        """
        try:
            await self.page.wait_for_load_state("networkidle")
            await self.page.wait_for_selector("select.select-option", timeout=timeout_ms)
            await self.page.wait_for_selector("section.lot-details-wrapper-MACRO", timeout=timeout_ms)
            return True
        except Exception as e:
            print(f"‚ùå Live dashboard –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è: {e}")
            return False

    async def extract_current_lot_details_live(self) -> Dict[str, Any]:
        """
        –°—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å –¥–µ—Ç–∞–ª–µ–π —Ç–µ–∫—É—â–µ–≥–æ –ª–æ—Ç–∞ –Ω–∞ live-–¥–∞—à–±–æ—Ä–¥–µ.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –ø–æ –≤–æ–∑–º–æ–∂–Ω—ã–º –º–µ—Ç–∫–∞–º (Location, Doc Type, Odometer, Est. Retail Value,
        Primary Damage, Secondary Damage, Highlights, VIN, Body Style, Color, Engine Type, Cylinders,
        Drive, Fuel, Keys, Special Note, ...).
        """
        await self.page.wait_for_selector("section.lot-details-wrapper-MACRO", timeout=15000)

        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–±–æ—Ä—â–∏–∫: –∏–¥—ë–º –ø–æ –≤—Å–µ–º "label -> value" –ø–∞—Ä–∞–º
        details = await self.page.evaluate(r"""
        () => {
          const root = document.querySelector("section.lot-details-wrapper-MACRO");
          const out = {};
          if (!root) return out;

          const text = (el) => (el ? (el.textContent || "").replace(/\s+/g, " ").trim() : "");
          const rows = root.querySelectorAll("[data-uname='lot-details-label']");

          rows.forEach(lbl => {
            const name = text(lbl);
            // –ó–Ω–∞—á–µ–Ω–∏–µ –æ–±—ã—á–Ω–æ –≤ [data-uname='lot-details-value'] –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ç–æ–π –∂–µ "itemrow"
            const row = lbl.closest(".itemrow") || lbl.parentElement;
            let val = "";
            if (row) {
              const v1 = row.querySelector("[data-uname='lot-details-value']");
              if (v1) val = text(v1);
              else {
                // VIN –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–Ω—É—Ç—Ä–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
                const vinA = row.querySelector("vin-number a");
                if (vinA) val = text(vinA);
              }
            }
            if (name) out[name] = val;
          });

          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ ‚Äî Highlights (–µ—Å–ª–∏ –Ω–µ –ø–æ–ø–∞–ª –æ–±—â–∏–º –ø—Ä–∞–≤–∏–ª–æ–º)
          if (!out["Highlights"]) {
            const hi = root.querySelector("#copart_COPART366A_lotDetailIconCodes_span, [id*='_lotDetailIconCodes_span']");
            if (hi) {
              const spans = Array.from(hi.querySelectorAll("span[title], span"));
              const vals = spans.map(s => text(s)).filter(Boolean);
              if (vals.length) out["Highlights"] = Array.from(new Set(vals)).join(", ");
            } else {
              // –ò–Ω–æ–≥–¥–∞ Highlights –≤ —è–≤–Ω–æ–π –ø–∞—Ä–µ label->value
              const hiRow = Array.from(root.querySelectorAll(".itemrow")).find(r => /Highlights/i.test(text(r)));
              if (hiRow) {
                const v = hiRow.querySelector("[data-uname='lot-details-value']");
                if (v) out["Highlights"] = text(v);
              }
            }
          }

          // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª—é—á–µ–π (—á—Ç–æ–±—ã –±—ã–ª–æ —É–¥–æ–±–Ω–æ –º–∞–ø–ø–∏—Ç—å)
          const norm = {};
          const map = {
            "Location": "location",
            "Doc Type": "doc_type",
            "Odometer": "odometer",
            "Est. Retail Value": "est_retail_value",
            "Sublot Location": "sublot_location",
            "Primary Damage": "primary_damage",
            "Secondary Damage": "secondary_damage",
            "Highlights": "highlights",
            "VIN": "vin",
            "Body Style": "body_style",
            "Color": "color",
            "Engine Type": "engine_type",
            "Cylinders": "cylinders",
            "Drive": "drive",
            "Fuel": "fuel",
            "Keys": "keys",
            "Special Note": "special_note"
          };

          for (const [k, v] of Object.entries(out)) {
            const key = map[k] || k.toLowerCase().replace(/\s+/g, "_");
            norm[key] = v;
          }

          return norm;
        }
        """)

        # –î–æ–±–∞–≤–∏–º —Ç–µ–∫—É—â–∏–π URL –¥–∞—à–±–æ—Ä–¥–∞
        details["dashboard_url"] = self.page.url
        return details

    async def _auction_widget_id_from_url(self) -> str | None:
        try:
            p = urlparse(self.page.url)
            print(f"CURRENT URL: {p}")
            det = (parse_qs(p.query).get("auctionDetails") or [""])[0]  # "135-A"
            if not det:
                return None
            wid = det.replace("-", "")  # "135A"
            return f"#widget-COPART{wid}"
        except Exception:
            return None

    
    # ---------- bidding ----------
    async def bid_current_lot(self) -> bool:
        """
        –ù–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É 'Bid' –Ω–∞ —Ç–µ–∫—É—â–µ–º –ª–æ—Ç–µ.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –∫–ª–∏–∫ –ø—Ä–æ–∏–∑–æ—à—ë–ª (–∫–Ω–æ–ø–∫–∞ –±—ã–ª–∞ –¥–æ—Å—Ç—É–ø–Ω–∞).
        """
        try:
            btn = self.page.locator("button[data-uname='bidCurrentLot']")
            await btn.wait_for(state="visible", timeout=8000)
            disabled = await btn.is_disabled()
            if disabled:
                print("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ Bid –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (disabled).")
                return False
            await btn.click()
            return True
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å Bid: {e}")
            return False

    async def read_bid_amount(self) -> Optional[str]:
        """
        –ß–∏—Ç–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ input[data-uname='bidAmount'].
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä '$4,300') –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.
        """
        try:
            inp = self.page.locator("input[data-uname='bidAmount']")
            await inp.wait_for(state="visible", timeout=8000)
            # –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ value
            val = await inp.input_value()
            return val.strip() if val else ""
        except Exception:
            return None

    async def track_bid_amounts(self, seconds: int = 30, interval: float = 1.0) -> List[Dict[str, Any]]:
        """
        –ö–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É —á–∏—Ç–∞–µ—Ç bidAmount –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ä–æ–≤:
        [{ts: '2025-09-08T15:04:05Z', amount: '$4,300'}, ...]
        """
        out: List[Dict[str, Any]] = []
        end = asyncio.get_event_loop().time() + seconds
        while asyncio.get_event_loop().time() < end:
            amt = await self.read_bid_amount()
            out.append({"ts": datetime.utcnow().isoformat() + "Z", "amount": amt})
            await asyncio.sleep(interval)
        return out


# ======================
# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π)
# ======================
async def main():
    import os

    # ENV:
    # COPART_USER, COPART_PASS, COPART_DO_BID=1, COPART_TRACK_SECS=15, HEADLESS=1, COPART_LIVE_TITLE="CT - Hartford"
    USERNAME = os.getenv("COPART_USER", "755554")
    PASSWORD = os.getenv("COPART_PASS", "newpass0408")
    DO_BID = os.getenv("COPART_DO_BID", "0") == "1"
    TRACK_SECONDS = int(os.getenv("COPART_TRACK_SECS", "15"))
    HEADLESS = os.getenv("HEADLESS", "0") == "1"
    LIVE_TITLE_HINT = os.getenv("COPART_LIVE_TITLE", "").strip()  # –Ω–∞–ø—Ä–∏–º–µ—Ä: "CT - Hartford"
    print(f"LIVE TITLE HINT: {LIVE_TITLE_HINT}")
    store = SessionStore("sessions.db")
    await store.init()

    # 1) –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é –∏ —Å—Ç–∞—Ä—Ç
    storage = await store.get_storage_state(USERNAME)
    bot = CopartBot(username=USERNAME, password=PASSWORD, headless=HEADLESS)
    await bot.start(storage_state=storage)

    try:
        # 2) —Å–µ—Å—Å–∏—è
        ok = await bot.ensure_session(store)
        if not ok:
            print("‚õî –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.")
            return

        # A) health
        is_ok = await bot.health_check()
        print(f"health_check: {is_ok}")

        # B) –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∏ join –ª–∞–π–≤–∞: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ –º–æ–¥–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ (ng-click)
        await bot.page.goto("https://www.copart.com/auctionCalendar", wait_until="domcontentloaded")
        await bot._maybe_accept_cookies()
        cal = await bot.get_calendar_live_status()
        print(f"–ù–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ: –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ = {len(cal['active'])}, –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö = {len(cal['inactive'])}")
        # for it in cal["active"]:
        #     print(f"  LIVE: {it['time']} | {it['title']} | {it['href']}")

        joined = False
        if LIVE_TITLE_HINT:
            print(f"‚ñ∂1 –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è—é—Å—å –∫ live –ø–æ –º–æ–¥–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ: {LIVE_TITLE_HINT}")
            joined = await bot.join_live_from_calendar_by_title(LIVE_TITLE_HINT)
            print(f'JOINED OR NOT: JOINED? {joined}')

        if not joined and cal["active"]:
            first = cal["active"][0]
            print(f'FUCKING FIRST CAL: {cal["active"][0]}')
            title_hint = (first.get("title") or "").split("(")[0].strip()
            if title_hint:
                print(f"‚ñ∂2 –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è—é—Å—å –∫ live –ø–æ –º–æ–¥–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ: {title_hint}")
                joined = await bot.join_live_from_calendar_by_title(title_hint)

            if not joined and first.get("href"):
                print(f"‚ñ∂ –§–æ–ª–ª–±–µ–∫: –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—é—Å—å –ø–æ href: {first['time']} | {first['href']}")
                joined = await bot.click_live_slot_and_join(first["href"])

        if not joined:
            print("‚õî –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ live-–∞—É–∫—Ü–∏–æ–Ω—É.")
            try:
                await bot.debug_list_live_titles()
            except Exception:
                pass
            return

        # C) –º—ã –Ω–∞ live-–¥–∞—à–±–æ—Ä–¥–µ; –≤—ã—á–∏—Å–ª–∏–º widgetId –ø–æ URL (auctionDetails=135-A ‚Üí #widget-COPART135A)
        widget_id = await bot._auction_widget_id_from_url()
        print(f"WIDGET ID: {widget_id}")
        if not widget_id:
            # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –¥–æ–∂–¥–∞—Ç—å—Å—è –ª—é–±–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞
            await bot.wait_for_live_dashboard(timeout_ms=45000)
            widget_id = await bot._auction_widget_id_from_url()

        print(f"Widget container: {widget_id or '(–Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω)'}")

        # D) –¥–æ–∂–¥—ë–º—Å—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–µ–ª–µ–≤–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞ –∏ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        ok = await bot.wait_for_live_dashboard(widget_id=widget_id, timeout_ms=45000)
        if not ok:
            print("‚õî Live dashboard –Ω–µ –ø—Ä–æ–≥—Ä—É–∑–∏–ª –Ω—É–∂–Ω—ã–π –≤–∏–¥–∂–µ—Ç.")
            return

        # E) —Å–Ω–∏–º–µ–º –¥–µ—Ç–∞–ª–∏ —Ç–µ–∫—É—â–µ–≥–æ –ª–æ—Ç–∞
        lot_live = await bot.extract_current_lot_details_live()
        print("Live lot details:", json.dumps(lot_live, ensure_ascii=False, indent=2))

        # F) —Å–ª–µ–∂–µ–Ω–∏–µ –∑–∞ —Å—Ç–∞–≤–∫–∞–º–∏: –∏–Ω–ø—É—Ç + SVG-—Ç–µ–∫—Å—Ç
        print(f"‚è±  –°–ª–µ–∂—É –∑–∞ —Å—Ç–∞–≤–∫–æ–π {TRACK_SECONDS} —Å–µ–∫‚Ä¶")
        samples = await bot.track_bid_amounts(widget_id=widget_id, seconds=TRACK_SECONDS, interval=1.0)
        # –ª–æ–≥ –∫—Ä–∞—Å–∏–≤–æ: ts | input=‚Ä¶ | price=‚Ä¶
        for s in samples:
            print(f"{s['ts']} | input={s.get('input_value')!s} | price={s.get('display_price')!s}")

        # G) (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –∫–ª–∏–∫–Ω—É—Ç—å Bid
        if DO_BID:
            bid_ok = await bot.bid_current_lot(widget_id=widget_id)
            print(f"Bid clicked: {bid_ok}")

            # –ø—Ä–æ—á–∏—Ç–∞–µ–º –µ—â—ë —Ä–∞–∑ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–ª–∏–∫–∞
            after_input = await bot.read_bid_amount(widget_id=widget_id)
            after_price = await bot.read_display_price(widget_id=widget_id)
            print(f"After bid ‚Üí input={after_input!s} | price={after_price!s}")

        # (–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –ø—Ä–µ–∂–Ω–∏–µ –ø—Ä–∏–º–µ—Ä—ã
        regions_today = await bot.get_regions_for_date()
        print(f"–°–µ–≥–æ–¥–Ω—è –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–≥–∏–æ–Ω–æ–≤: {len(regions_today)}")
        for r in regions_today:
            print(f"  {r['time']} | {r['title']} | {r['link']}")

        example_lot_url = "https://www.copart.com/lot/48501315/salvage-2022-nissan-frontier-s-fl-ft-pierce?resultIndex=0&totalRecords=94&backTo=%2FsaleListResult%2F86%2F2025-09-03%2FA%3Flocation%3DFL%20-%20Ft.%20Pierce&saleDate=1756908000000&liveAuction=false&from=&yardNum=86&displayStr=Sale%20list%20for%20FL%20-%20Ft.%20Pierce&viewedLot=48501315&fromSearch=true"
        try:
            lot = await bot.get_lot_details(example_lot_url)
            print("Lot (card page):", json.dumps(lot, ensure_ascii=False, indent=2))
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ—Ç–∞:", e)

    finally:
        await bot.close()


if __name__ == "__main__":
    asyncio.run(main())

# _hrs or _ful its diferrence between hd or not hd photo, _thb is thubnail photo