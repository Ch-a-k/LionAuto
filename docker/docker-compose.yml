version: "3.8"

services:
  db:
    image: postgres:16
    container_name: la_postgres
    restart: always
    env_file:
      - ../.env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "127.0.0.1:5455:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio
    container_name: la_minio
    ports:
      - "127.0.0.1:9000:9000"
      - "127.0.0.1:9001:9001"
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_KEY}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/ready"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: la_redis
    # запускаем по конфигу, где отключены команды репликации
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    restart: always
    healthcheck:
      # если включён пароль, добавь: redis-cli -a "$REDIS_PASSWORD" ping
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - ../redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
      - redis_data:/data
    # ПОРТЫ НЕ ПУБЛИКУЕМ (ничего в "ports" не добавляем)


  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_DATA_DIR: /var/lib/zookeeper/data
      ZOOKEEPER_LOG_DIR: /var/lib/zookeeper/log
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    healthcheck:
      test: ["CMD-SHELL", "echo 'ruok' | nc localhost 2181 || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "127.0.0.1:9092:9092"
      - "127.0.0.1:29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 60s

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "127.0.0.1:8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

  clamav:
    build:
      context: ../clamav 
      dockerfile: Dockerfile.clamav
    image: clamav-custom
    container_name: la_clamav
    restart: unless-stopped
    platform: linux/amd64
    ports:
      - "127.0.0.1:3310:3310"
    volumes:
      - clamav_data:/var/lib/clamav
      - ../clamav/freshclam.conf:/etc/clamav/freshclam.conf:ro
    healthcheck:
      test: ["CMD", "sh", "-c", "echo 'PING' | nc localhost 3310 | grep PONG"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    environment:
      - CLAMD_STARTUP_TIMEOUT=300
      - FRESHCLAM_CHECKS=4
      - CLAMAV_NO_FRESHCLAMD=false

  backend:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: la_backend
    restart: always
    env_file:
      - ../.env
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    volumes:
      - ./:/app
    ports:
      - "89:8000"
    command: ["poetry", "run", "uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]
    user: "1000:1000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:89/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  kafka-consumer:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: la_kafka_consumer
    restart: always
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    env_file:
      - ../.env
    command: ["poetry", "run", "celery", "-A", "app.core.config.celery.celery_app", "worker", "--loglevel=info"]

  celery:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: la_celery
    restart: always
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      clamav:
        condition: service_healthy
    env_file:
      - ../.env
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      CLAMAV_HOST: clamav
      CLAMAV_PORT: 3310
    command: ["poetry", "run", "celery", "-A", "app.core.config.celery.celery_app", "worker", "--loglevel=info"]

volumes:
  postgres_data:
    driver: local
  minio_data:
    driver: local
  redis_data:
    driver: local
  kafka_data:
    driver: local
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local
  clamav_data:
    driver: local